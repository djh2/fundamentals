The project has 3 parts: client, server, AI.  

All assignments of points admit partial credit.  That is, if their AI
runs almost always, but crashed once, then deduct a small part of the
50 points, not all of it.

The first component of grading is to run their code.  We didn't
provide specifications on how it should be run, but it shouldn't be
too hard to figure out.  

+50 points for *each* of running server, client, and AI.   
  Running means that you can play a whole game without the system
  failing.  

Then run their code against our servers and clients.  You can use our
randomly playing client.  Make sure that their server doesn't crash,
doesn't send invalid messages; that their clients don't get stuck,
etc.  

+20 points for *each* of successfully running their server, client,
and AI against our code.  

Our code is in SVN in trunk/progsN/dice-server.rkt .  To run our
server, open that file, and use (universe (start% 2)).  To run our
"AI" client, run (big-bang (better-player false false false empty)).

At this point, you'll know if they've done what we asked, to at least
a minimal degree, except for the AI.  Look at their AI implementation,
and check that they implemented their AI as described in the homework:
they should build a game tree, and evaluate board positions, and
choose the best one using minimax.  

+50 for implementing the AI as described.  

The second portion of the grading is for design.  We assign +75 points
to each of the three portions of the assignment.  You should work
backwards from 75, deducting for mistakes like missing contracts and
purpose statements, absent data definitions, lack of tests,
incomprehensible and poorly designed code, and so on.  

The students' designs will likely be different from each other, and so
we can't give a specific rubric.  You'll need to use your judgment.  

TOTALS:

50x3 = 150 for running
20x3 =  60 for working with our code
        50 for AI
75x3 = 225 for design
--------------------------
       485 TOTAL
